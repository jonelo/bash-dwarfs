#!/usr/bin/env bash

# latlng 1.0.0
# Determines both latitude and longitude of a location.
#
# It is part of the bashberries project
# see also https://github.com/jonelo/bashberries
#
# Copyright 2017 Johann N. Loefflmann
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
. "${SCRIPT_DIR}/includes/version.include"
. "${SCRIPT_DIR}/includes/network.include"

usage() {
cat << END
latlng v1.0.0, Copyright 2017 Johann N. Loefflmann

Determines both latitude and longitude of a location.
The script uses the Google Maps web service.

Usage:
    latlng [-c][-i] [location]

Options:
    -c         output as one line separated by a comma
    -i         input in interactive mode

Parameters:
    location   the location as a string

Examples:
    latlng "Statue of Liberty"
               determines lat and lng of the Statue of Liberty
    latlng -ic
               reads input from the user in order to determine lat and lng
END
exit 1
}

main() {
    # options
    INTERACTIVE=0
    CSV=0
    while getopts 'ic' OPTION
    do
        case $OPTION in
        i) INTERACTIVE=1
           ;;
        c) CSV=1
           ;;
        ?) usage
           ;;
        esac
    done
    shift $(($OPTIND -1))

    # parameters
    case $# in
        0) if [ $INTERACTIVE -eq 1 ]; then
               read LOCATION
           else
               usage
           fi
           ;;
        1) LOCATION="$1"
           ;;
        *) usage
           ;;
    esac

    # call curl
    GOOGLEAPI=http://maps.googleapis.com/maps/api/geocode/json
    CURL_VERSION=$(curl -V)
    REGEX='^curl ([\.0-9]+)'
    if [ ! -z "$CURL_VERSION" ] && [[ "$CURL_VERSION" =~ $REGEX ]]; then
        CURL_VERSION=$(printf "%s\n" ${BASH_REMATCH[1]})
        if [ $(normalizedVersion $CURL_VERSION) -ge $(normalizedVersion "7.18.0") ]; then
            # requirement: curl 7.18.0 or newer
            DATA=$(curl -G \
                --data-urlencode "address=${LOCATION}" \
                --data-urlencode "sensor=false" \
                ${GOOGLEAPI} 2> /dev/null)
        else
            # fallback: there is an older curl that doesn't support --data-urlencode
            # do the urlencode by a homebrewed function
            LOCATION=$(urlEncode "${LOCATION}")
            DATA=$(curl "${GOOGLEAPI}?address=${LOCATION}&sensor=false" 2> /dev/null)
        fi
    else
        printf "Error: cannot determine curl version. Exit.\n"
        exit 1
    fi

    # "geometry" : { "location" : { "lat" : 40.6892494, "lng" : -74.04450039999999 }
    if [ ! -z "$DATA" ]; then

        REGEX='"formatted_address" : "([^"]*)"'
        if [[ "$DATA" =~ $REGEX ]] && [ $CSV -eq 0 ]; then
            printf "Formatted Address:   %s\n" "${BASH_REMATCH[1]}"
        fi

        REGEX='"location" : \{[[:space:]]*"lat" : ([^,]+),[[:space:]]*"lng" : ([^\}]+) \}'
        if [[ "$DATA" =~ $REGEX ]]; then
            if [ $CSV -eq 1 ]; then
                printf "%s,%s\n" "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
            else
                printf "Latitude:            %s\n" "${BASH_REMATCH[1]}"
                printf "Longitude:           %s\n" "${BASH_REMATCH[2]}"
            fi
        fi
    fi
}

main "$@"
