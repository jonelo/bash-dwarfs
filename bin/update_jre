#!/usr/bin/env bash
#
# update_jre
SCRIPT_VERSION=1.2.0
#
# This script downloads the latest JRE, Server JRE, JDK or tzupdater
# from oracle.com. Use option -a to accept Oracle's binary license.
# Without that option, this script won't do the job.
#
# Copyright 2018 Johann N. Loefflmann
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Explicitly set the PATH
PATH="/sbin:/usr/sbin:/bin:/usr/bin"
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"

usage() {
cat << END
update_jre v${SCRIPT_VERSION}, Copyright 2018 Johann N. Loefflmann

Downloads the latest JRE, Server JRE, or JDK tarball resp. the latest
tzupdater zip from the web, extracts it and creates a symlink called
jre_latest, sjre_latest, jdk_latest or tzupdater.jar.

Usage:
    update_jre [ [-h] | -a [-d] [-f] [-k] [-t type] [path] ]

Options:
    -a      accept license. That is a required option if you want to
            download the JRE, JDK or tzupdater from the Oracle site.
            Please read the license at
            www.oracle.com/technetwork/java/javase/terms/license/index.html
            resp. at
            http://www.oracle.com/technetwork/java/javasebusiness/downloads/tzupdater-lic-354297.txt
            and allow the script to download the package by specifying this option.

    -d      dry run. Don't download the JRE or JDK or tzupdater, just inform me.

    -f      force. Even if we have the JRE already, update it again.

    -h      prints this help.

    -k      keep the downloaded .tar.gz resp. .zip, don't remove it at the end.

    -t      type. Can be jre (the JRE), sjre (server JRE), jdk (the JDK) or
            tzupdater.

    -v      version. Prints out the version of this script.

Parameters:
    path    specifies the path where the JRE, JDK or tzupdater should be stored.
            It will be created if it doesn't exist.
            If omitted, .jre/, .sjre/, .jdk/, or .tzupdater/ will be used.

Examples:
    update_jre -a
            updates the JRE in ./jre/ and it creates a symlink called
            jre_latest there.
    update_jre -a -t jdk /opt/java/
            updates the JDK in /opt/java/ and it creates a symlink
            called jdk_latest there.
    update_jre -a -t tzupdater /opt/java/
            updates the tzupdater in /opt/java/ and it creates a symlink
            called tzupdater.jar there.
END
exit 0
}

function detectOStag() {
    # What OS are we running on?
    local OS="$(uname -s)"
    case "$OS" in
        Darwin)
            OS_TAG="osx"
            ;;
        Linux)
            OS_TAG="linux"
            ;;
        Solaris)
            OS_TAG="solaris"
            ;;
        *)
            printf "ERROR: Not supported on %s\n" "$OS"
            exit 1
            ;;
    esac
}

function licenseAcceptedRequired() {
    if [ $1 -eq 0 ]; then
cat << EOM

ERROR: In order to allow this script to download the latest JRE, Server JRE or JDK,
       please read and accept the license at
       http://www.oracle.com/technetwork/java/javase/terms/license/index.html
       by specifying the -a option to this script.

       In order to allow this script to download the latest tzupdater,
       please read and accept the license at
       http://www.oracle.com/technetwork/java/javasebusiness/downloads/tzupdater-lic-354297.txt
       by specifying the -a option to this script.

       Use option -h to get more help.

EOM
        exit 1
    fi
}

# Download a webpage and store it to a file
# param1: the website
# param2: the file
function downloadWebsite() {
    local WEBSITE="$1"
    local OUTFILE="$2"

    printf "INFO: Downloading %s and storing it to %s ...\n" "${WEBSITE}" "${OUTFILE}"
    if [ -f "$OUTFILE" ]; then
        rm "$OUTFILE"
    fi
    curl -o "$OUTFILE" "$WEBSITE"
    if [ ! -f "$OUTFILE" ]; then
        printf "FATAL: Download of webpage %s failed. Please check your internet connection.\n" "${WEBSITE}"
        exit 1
    fi
}

# Parse a file
# param1: the file
# param2: the regex
function parseFile() {
    local INFILE="$1"
    local REGEX=$2
    if [ -f "$INFILE" ]; then
        HTML=$(<"$INFILE")
    fi
    if [[ "$HTML" =~ $REGEX ]]; then
        FOUND_ADDRESS="${BASH_REMATCH[1]}"
        printf "INFO: Found %s in %s\n" "${FOUND_ADDRESS}" "${INFILE}"
    else
        printf "FATAL: Actual download address was not found in content of %s\n" "${INFILE}"
        exit 1
    fi
}

function main() {
    detectOStag

    # options
    ACCEPT=0
    DRYRUN=0
    FORCE=0
    KEEP=0
    TYPE="jre"
    while getopts ':afkht:dv' OPTION
    do
        case $OPTION in
            a) ACCEPT=1
               ;;
            d) DRYRUN=1
               ;;
            f) FORCE=1
               ;;
            k) KEEP=1
               ;;
            t) TYPE="$OPTARG"
	           if [ "$TYPE" != "jre" ] && [ "$TYPE" != "sjre" ] && [ "$TYPE" != "jdk" ] && [ "$TYPE" != "tzupdater" ]; then
                   printf "ERROR: -t %s is not supported.\n" "$TYPE"
                   exit 1
               fi
               if [ "$OS_TAG" = "osx" ] && [ "$TYPE" = "sjre" ]; then
                   printf "ERROR: A Server JRE is not supported on macOS.\n" "$TYPE"
                   exit 1
               fi
               if [ "$OS_TAG" = "osx" ] && [ "$TYPE" = "jdk" ]; then
                   printf "ERROR: a JDK .tar.gz is not supported on macOS.\n" "$TYPE"
                   exit 1
               fi
               ;;
            v) printf "%s\n" "$SCRIPT_VERSION"
               exit 0
               ;;
            h) usage
               ;;
            ?) printf "ERROR: Option -%s is not a supported option.\n" "$OPTARG"
               exit 1
               ;;
        esac
    done
    shift $(($OPTIND -1))
    licenseAcceptedRequired $ACCEPT

    # parameters
    case $# in
        0) TARGET_DIR="${SCRIPT_DIR}/.${TYPE}"
           ;;
        1) TARGET_DIR="$1"
           ;;
        *) printf "ERROR: none or one parameters are supported\n"
           exit 1
           ;;
    esac


    VERSION_FILE="${TARGET_DIR}/${TYPE}.version"
    TEMP_FILE=/tmp/update_${TYPE}.$$

    # create the configuration directory
    if [ ! -d "${TARGET_DIR}" ]; then
        printf "INFO: Making directory: %s\n" "${TARGET_DIR}"
        mkdir -p "${TARGET_DIR}"
    fi

    printf "INFO: Checking for new %s on the Java onestop page ...\n" $TYPE

    if [ $TYPE = "tzupdater" ]; then
        DOWNLOAD_ADDRESS="http://www.oracle.com/technetwork/java/javase/downloads/tzupdater-download-513681.html"
        downloadWebsite "$DOWNLOAD_ADDRESS" "$TEMP_FILE"
        # Find the address to the tzupdater .zip file
        # e.g. http://download.oracle.com/otn-pub/java/tzupdater/2.1.0/tzupdater-2_1_0.zip
        REGEX='(http://download.oracle.com/otn-pub/java/tzupdater/[^\"]+)\"'
        parseFile "$TEMP_FILE" $REGEX
    else # jre, sjre or jdk
        DOWNLOAD_ADDRESS="http://www.oracle.com/technetwork/java/javase/downloads/index.html"
        downloadWebsite "$DOWNLOAD_ADDRESS" "$TEMP_FILE"
        # Find the actual JRE/JDK download page
        # e.g. <a href="/technetwork/java/javase/downloads/jre10-downloads-4417026.html" target=""><img alt="Download JRE"
        #      <a align="center" target="" href="/technetwork/java/javase/downloads/sjre10-downloads-4417025.html"><img alt="Download JDK"
        #      <a href="/technetwork/java/javase/downloads/jdk10-downloads-4416644.html" target=""><img alt="Download JDK"
        REGEX='href=\"(/technetwork/java/javase/downloads/'${TYPE}'[^\"]+)\"([^>]*)>[[:space:]]*<img[[:space:]]+alt=\"Download[[:space:]]'
        parseFile "$TEMP_FILE" $REGEX

        DOWNLOAD_ADDRESS="http://www.oracle.com/${FOUND_ADDRESS}"
        downloadWebsite "$DOWNLOAD_ADDRESS" "$TEMP_FILE"
        #  Parse for the .tar.gz file
        # e.g. http://download.oracle.com/otn-pub/java/jdk/10.0.1+10/fb4372174a714e6b8c52526dc134031e/jre-10.0.1_linux-x64_bin.tar.gz
        REGEX='(http://download.oracle.com/otn-pub/java/[^_]+_'${OS_TAG}'[^\.]+\.tar.\gz)\"'
        parseFile "$TEMP_FILE" $REGEX
    fi

    DOWNLOAD_ADDRESS="${FOUND_ADDRESS}"
    ARCHIVE_FILE="${TARGET_DIR}/${DOWNLOAD_ADDRESS##*/}"

    # cleanup
    rm "$TEMP_FILE" 2> /dev/null

    # Do we need to download the file actually?
    # Let's check what we have downloaded in the past
    if [ ! -f "${VERSION_FILE}" ]; then
       printf "%s\n" "none" > "${VERSION_FILE}"
    fi
    WEHAVE=$(<"${VERSION_FILE}")

    if [ "$DOWNLOAD_ADDRESS" != "$WEHAVE" ] || [ $FORCE -eq 1 ]; then
       if [ $DRYRUN -eq 1 ]; then
           printf "INFO: DRY RUN: Would download %s and would save it to %s.\n" "$DOWNLOAD_ADDRESS" "$ARCHIVE_FILE"
           exit 0
       fi
       printf "Downloading %s ...\n" "$DOWNLOAD_ADDRESS"
       if [ -f "${ARCHIVE_FILE}" ]; then
           rm "${ARCHIVE_FILE}"
       fi
       curl -o "${ARCHIVE_FILE}" -j -k -L -H "Cookie: oraclelicense=accept-securebackup-cookie" "$DOWNLOAD_ADDRESS"
       if [ -f "${ARCHIVE_FILE}" ]; then

           printf "%s\n" "${DOWNLOAD_ADDRESS}" > "${VERSION_FILE}"

           printf "Extracting the file %s ...\n" "${ARCHIVE_FILE}"
           if [ $TYPE = "tzupdater" ]; then
               # find the path of the latest tzupdater by searching in the .zip file
               LATEST=$(unzip -l "${ARCHIVE_FILE}" | grep tzupdater.jar)
               LATEST=${LATEST##* }
               # extracting the .zip
               unzip -d "${TARGET_DIR}" -o "${ARCHIVE_FILE}"
           else
               gunzip < "${ARCHIVE_FILE}" | tar xfv - -C "${TARGET_DIR}"
           fi

           # relative symlink preferred
           BACKUP=$(pwd)
           cd "${TARGET_DIR}"

           if [ $TYPE = "tzupdater" ]; then
               SYMLINK="${TYPE}.jar"
           else
               # find the java binary in the just created folder, because it is faster than to search in the .tar.gz
               unset -v LATEST
               for FILE in $(find . -name java); do
                   [[ $FILE -nt $LATEST ]] && LATEST=$FILE
               done
               # extract the path from the .../bin/java string
               LATEST=${LATEST%/*} # remove /java from the string
               LATEST=${LATEST%/*} # remove /bin from the string

               SYMLINK="${TYPE}_latest"
           fi
           # update the symlink
           rm "${SYMLINK}" 2> /dev/null
           ln -s "${LATEST}" "${SYMLINK}"

           # restore the folder
           cd "${BACKUP}"

           if [ $KEEP -eq 0 ]; then
               printf "Clean up ...\n"
               rm "${ARCHIVE_FILE}"
           fi
       else
           printf "FATAL: Download failed.\n"
           exit 1
       fi
    else
       printf "Skipping download, because it seems that have downloaded %s already in the past. Use -f to force a download.\n" $DOWNLOAD_ADDRESS
    fi
}

main "$@"
