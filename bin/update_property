#!/usr/bin/env bash

# update_property 1.0.0
# Updates the value of a key/value pair in a property file.
#
# It is part of the bash-dwarfs project
# see also https://github.com/jonelo/bash-dwarfs
#
# Copyright 2017 Johann N. Loefflmann
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

PATH=/bin:/usr/bin:/usr/sbin

usage() {
cat << END
update_property v1.0.0, Copyright 2017 Johann N. Loefflmann

Updates the value of a key/value pair in a property file.
The script saves existing comments and also the order of the properties.

Usage:
    update_property [-e] [-f] [-q] [file key value]

Options:
    -e      echo the updated line of the file.
    -f      force to append the key/value pair to the file even if the key is
            not in the property file yet.
    -q      set quotes around the value when writing the value.

Parameters:
    file    specifies the file that needs to be updated.

    key     specifies the key in the property file.

    value   specifies the value for the key.

Examples:
    update_property -f app.conf mykey "new value"
            updates the key called mykey with the value called "new value" in
            the app.conf property file in any case
END
exit 1
}

function printUpdatedValueDependentOnFlagQ {
    if [ ${qflag} -eq 1 ]; then
        printf "%s=\"%s\"\n" "${KEY}" "${VALUE}"
    else
        printf "%s=%s\n" "${KEY}" "${VALUE}"
    fi
}

function printUpdatedValueDependentOnFlagE() {
    if [ ${eflag} -eq 1 ]; then
        printUpdatedValueDependentOnFlagQ | tee -a "${TEMPFILE}"
    else
        printUpdatedValueDependentOnFlagQ >> "${TEMPFILE}"
    fi
}

main() {
    # options
    qflag=0
    eflag=0
    fflag=0
    while getopts 'efq' OPTION
    do
        case $OPTION in
        e) eflag=1
           ;;
        f) fflag=1
           ;;
        q) qflag=1
           ;;
        ?) usage
           ;;
        esac
    done
    shift $(($OPTIND -1))

    # parameters
    case $# in
        3) FILE=$1;
           KEY=$2;
           VALUE=$3;
           ;;
        *) usage
           ;;
    esac

    # input validation
    if [ ! -f ${FILE} ]; then
        printf "Error: file %s not found. Exit.\n" "${FILE}" >&2
        exit 1;
    fi

    TEMPFILE="$1.$$"
    FOUND=0

    while read LINE
    do
        # LINE starts with key=
        if [[ "${LINE}" =~ ^${KEY}= ]]; then
            # print the new key/value pair
            FOUND=1
            printUpdatedValueDependentOnFlagE
        else
            # just print the existing line
            printf "%s\n" "${LINE}" >> "${TEMPFILE}"
        fi
        # triple "lighter than" in order to avoid the loss of variables inside the loop
    done <<< "$(cat "${FILE}")"

    # the key has not been found ...
    if [ ${FOUND} -eq 0 ]; then
        # append it if that is wanted wanted by the user
        if [ ${fflag} -eq 1 ]; then
            printUpdatedValueDependentOnFlagE
        else
            printf "Error: the key called \"%s\" has not been found in \"%s\". " \
                "${KEY}" "${FILE}" >&2
            printf "Use -f if you want to set that key/value pair in any case.\n" >&2
            rm "${TEMPFILE}"
            exit 1
        fi
    fi
    mv "${TEMPFILE}" "${FILE}"
}

main "$@"
