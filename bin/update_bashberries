#!/usr/bin/env bash
#
# update_bashberries
SCRIPT_VERSION=1.5.0
#
# This script downloads the latest scripts from the bashberries project to
# the directory where this script is stored.
#
# Copyright 2017-2018 Johann N. Loefflmann
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

PATH=/bin:/usr/bin:/usr/sbin
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
SCRIPT_NAME="${0##*/}"

usage() {
cat << END
update_bashberries v${SCRIPT_VERSION}, Copyright 2017-2019 Johann N. Loefflmann

Downloads the latest bash scripts from the bashberries project on github
and updates any existing scripts in the directory that has been specified.

Usage:
    update_bashberries [-n] <directory>

Options:
    -n               don't check for a new update_bashberries script

Parameter:
    directory        the directory where the scripts should be stored

Examples:
    ./update_bashberries .
                     updates the bashberries in the current working directory
    bash <(curl -Ls http://bit.ly/update-bashberries) ~/bin
                     updates the bashberries in ~/bin with just this line
END
}


main() {

    # options
    updateWanted=1
    while getopts 'n' OPTION
    do
        case $OPTION in
        n) updateWanted=0
           ;;
        ?) usage
           ;;
        esac
    done
    shift $((OPTIND -1))

    # parameters
    case $# in
        1) TARGET=$1
           ;;
        *) usage
           exit
           ;;
    esac

    # if we try to install/update it using "bash <(curl -Ls https://bit.ly/update-bashberries) .",
    # $0 becomes a file descriptor and not a file. In this case, we don't check for an update, because
    # we have the latest script already
    if [ ! -f "$0" ]; then
        updateWanted=0
    fi

    # do we have the latest update_bashberries script?
    if [ $updateWanted -eq 1 ]; then

        printf "Checking whether there is a new update script ...\n"
        curl -Lo "$0.new" https://raw.githubusercontent.com/jonelo/bashberries/master/bin/update_bashberries
        if [ -f "$0.new" ]; then
            diffs=$(diff "$0" "$0.new" | wc -l)

            # is an update required?
            if [ "$diffs" -gt 0 ]; then
                printf "There is a new update script availabe. Replacing the old with the new one ...\n"
                # fix permissions
                chmod u+x "$0.new"

                mv "$0" "$0.old"
                mv "$0.new" "$0"
                rm "$0.old"
                # let's call the new update_bashberries script
                # with no update request
                printf "Calling the new update script ...\n"
                $0 -n "$@"
                # and exit this (old) process
                exit
            else
                printf "You are running the latest update script.\n"
                # cleanup
                rm "$0.new"
            fi
        else
            printf "There seems to be a problem with the internet connection. Exit.\n"
            exit
        fi
    fi

    # from here we can assume that we have the latest update script
    TEMPZIP=/tmp/bashberries.$$.zip
    TEMPDIR=/tmp/bashberries.$$

    curl -Lo $TEMPZIP https://github.com/jonelo/bashberries/archive/master.zip
    unzip -d $TEMPDIR $TEMPZIP
    mkdir -p "${TARGET}/includes"
    mv $TEMPDIR/bashberries-master/bin/includes/* "${TARGET}/includes/"
    rmdir $TEMPDIR/bashberries-master/bin/includes
    mv $TEMPDIR/bashberries-master/bin/* "$TARGET/"
    rm -R $TEMPDIR
    rm $TEMPZIP
}

main "$@"

