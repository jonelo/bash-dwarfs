#!/usr/bin/env bash
#
# update_jdk
SCRIPT_VERSION=1.20.0
#
# Downloads the latest x64 JRE/JDK tarball resp. the latest tzupdater zip
# from the web, extracts it and creates/updates a symlink called <type>_latest.
# The OS flavor of the JRE/JDK is determined by the OS that you are running.
# Linux and macOS are supported.
#
# It is part of the bashberries project
# see also https://github.com/jonelo/bashberries
#
# Copyright 2019-2020 Johann N. Loefflmann
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Explicitly set the PATH
PATH="/sbin:/usr/sbin:/bin:/usr/bin"
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
SCRIPT_NAME="${0##*/}"

usage() {
cat << END
update_jdk v${SCRIPT_VERSION}, Copyright 2019-2020 Johann N. Loefflmann

Downloads the JRE/JDK from the web, extracts it and creates/updates a symlink
called <type>_latest.
The latest timezone database can be applied to the requested JRE/JDK as well
so that you have the most possible up to date JRE/JDK within a Java family
from your preferred source. And since the symlink always points to the
JRE/JDK you can update the JRE/JDK both fast and comfortable.
Both GNU/Linux and macOS are supported.

Usage:
    update_jdk [ [-h] |
            [-d] [-f] [-k] -s source [-t type] [-z] [-Z location] [path] ]

Options:
    -d      dry run. Don't download the JRE, JDK or tzupdater, just inform the
            user.

    -f      force. Even if we have the JRE, JDK or tzupdater already, update it
            again.

    -h      prints this help.

    -k      keep the downloaded .tar.gz resp. .zip, don't remove it at the end.

    -s      source. The URI should start with http or https and point to a
            .tar.gz file that contains the JRE/JDK binaries. You can find
            JRE/JDK tarballs for example at

            - adoptopenjdk.net
            - azul.com
            - bell-sw.com/java
            - java.com
            - jdk.java.net
            - www.oracle.com/java

    -t      type. The name of the symlink prefix, if not specified, jre is used.

    -v      version. Prints out the version of this script.

    -z      after the JRE or JDK has been downloaded and extracted, the
            latest tzdata will be applied to the JRE or JDK.
            The script expects the tzupdater.jar in the ${SCRIPT_DIR}

    -Z      the timezone files if not from IANA.

Parameters:
    path    specifies the path where the JRE, JDK should be stored.
            It will be created if it doesn't exist.
            If omitted, .<type>/ will be used.

Examples:
    ./update_jdk -s "\$ADDRESS"
            downloads the JRE tarball from "\$ADDRESS", extracts it, and updates
            the JRE in ./jre/ and it creates a symlink called jre_latest there.
    ./update_jdk -s "\$ADDRESS" -z myjres
            updates the JRE in myjres and it updates the symlink called
            jre_latest there. Additionally the timezone updater
            is being called so that the JRE's timezone database also gets updated.
    ./update_jdk -s "\$ADDRESS" -t jdk /opt/java/
            updates the JDK in /opt/java/ and it updates a symlink
            called jdk_latest there.
    ./update_jdk -z -s "\$ADDRESS" -t openjdk11
            downloads the JDK from "\$ADDRESS",
            applies the latest timezone database from IANA to the JDK by calling
            the tzupdater tool. Symlink called openjdk11/openjdk11_latest
            will point to the latest and updated OpenJDK11 build.
END
exit 0
}

# Download a webpage and store it to a file
# param1: the website
# param2: the file
function downloadWebsite() {
    local WEBSITE="$1"
    local OUTFILE="$2"

    printf "INFO: Downloading %s and storing it to %s ...\n" "${WEBSITE}" "${OUTFILE}"
    if [ -f "$OUTFILE" ]; then
        rm "$OUTFILE"
    fi
    curl -Lo "$OUTFILE" "$WEBSITE"
    if [ ! -f "$OUTFILE" ]; then
        printf "FATAL: Download of webpage %s failed. Please check your internet connection.\n" "${WEBSITE}"
        exit 1
    fi
}

# Parse a file
# param1: the file
# param2: the regex
function parseFile() {
    local INFILE="$1"
    local REGEX=$2
    if [ -f "$INFILE" ]; then
        HTML=$(<"$INFILE")
    fi
    if [[ "$HTML" =~ $REGEX ]]; then
        FOUND_ADDRESS="${BASH_REMATCH[1]}"
        printf "INFO: Found %s in %s\n" "${FOUND_ADDRESS}" "${INFILE}"
    else
        printf "FATAL: Actual download address was not found in content of %s\n" "${INFILE}"
        exit 1
    fi
}

function runTzUpdater() {
    # is tzupdater.jar in the script dir?
    if [[ -f "${SCRIPT_DIR}/tzupdater.jar" ]]; then
        # call the tzupdater by using the java binary from the JRE/JDK that we have downloaded
        # specify the expected property as I described in Jan 2007:
        # https://web.archive.org/web/20071228042650/https://lists.apple.com/archives/Java-dev/2007/Jan/msg00060.html
        "${TARGET_DIR}/${TYPE}_latest/bin/java" -Djava.vendor="Oracle Corporation" -jar "${SCRIPT_DIR}/tzupdater.jar" -v -l $ZUPPER
    else
        printf "Warning: %s not found.\n" "${SCRIPT_DIR}/tzupdater.jar"
        printf "You can download tzupdater.jar from %s\n" "https://www.oracle.com/java/technologies/javase-tzupdater-downloads.html"
        printf "Ignoring option -z\n"
    fi
}

function main() {
    # options
    ACCEPT=0
    DRYRUN=0
    FORCE=0
    KEEP=0
    ZOPTION=0
    ZUPPER=" "
    TYPE="jre"
    SOURCE=""
    while getopts ':afkht:dvzZ:s:' OPTION
    do
        case $OPTION in
            d) DRYRUN=1
               ;;
            f) FORCE=1
               ;;
            h) usage
               ;;
            k) KEEP=1
               ;;
            s) SOURCE="$OPTARG"
               ;;
            t) TYPE="$OPTARG"
               ;;
            v) printf "%s\n" "$SCRIPT_VERSION"
               exit 0
               ;;
            z) ZOPTION=1
               ;;
            Z) ZUPPER="$OPTARG"
               ;;
            ?) printf "ERROR: Option -%s is not a supported option.\n" "$OPTARG"
               exit 1
               ;;
        esac
    done
    shift $(($OPTIND -1))

    SUFFIX=".tar.gz"
    # option checks
    if [ "$SOURCE" = "" ]; then
        printf "ERROR: Option -s is required.\n"
        exit
    fi

    # parameters
    case $# in
        0) TARGET_DIR="${SCRIPT_DIR}/${TYPE}"
           ;;
        1) TARGET_DIR="$1"
           ;;
        *) printf "ERROR: none or one parameters are supported\n"
           exit 1
           ;;
    esac

    VERSION_FILE="${TARGET_DIR}/${TYPE}.version"
    TEMP_FILE=/tmp/update_${TYPE}.$$

    # create the configuration directory
    if [ ! -d "${TARGET_DIR}" ]; then
        printf "INFO: Making directory: %s\n" "${TARGET_DIR}"
        mkdir -p "${TARGET_DIR}"
    fi

    FOUND_ADDRESS="$SOURCE"
    DOWNLOAD_ADDRESS="${FOUND_ADDRESS}"
    ARCHIVE_FILE="${TARGET_DIR}/${DOWNLOAD_ADDRESS##*/}"

    # cleanup
    rm "$TEMP_FILE" 2> /dev/null

    # Do we need to download the file actually?
    # Let's check what we have downloaded in the past
    if [ ! -f "${VERSION_FILE}" ]; then
       printf "%s\n" "none" > "${VERSION_FILE}"
    fi
    WEHAVE=$(<"${VERSION_FILE}")

    if [ "$DOWNLOAD_ADDRESS" != "$WEHAVE" -o $FORCE -eq 1 ]; then
       if [ $DRYRUN -eq 1 ]; then
           printf "INFO: DRY RUN: Would download %s and would save it to %s.\n" "$DOWNLOAD_ADDRESS" "$ARCHIVE_FILE"
           exit 0
       fi
       printf "Downloading %s ...\n" "$DOWNLOAD_ADDRESS"
       if [ -f "${ARCHIVE_FILE}" ]; then
           rm "${ARCHIVE_FILE}"
       fi

       curl -Lo "${ARCHIVE_FILE}" "$DOWNLOAD_ADDRESS"

       if [ -f "${ARCHIVE_FILE}" ]; then

           printf "%s\n" "${DOWNLOAD_ADDRESS}" > "${VERSION_FILE}"

           printf "Extracting the file %s ...\n" "${ARCHIVE_FILE}"
           if [ "${SUFFIX}" = ".tar.gz" ]; then
               gunzip < "${ARCHIVE_FILE}" | tar xfv - -C "${TARGET_DIR}"
           else
               unzip -d "${TARGET_DIR}" -o "${ARCHIVE_FILE}"
           fi

           # determine SYMLINK name
           if [ "${SUFFIX}" = ".tar.gz" ]; then
               LATEST=$(gunzip < "${ARCHIVE_FILE}" | tar tvf - | grep '/bin/java$')
           else
               LATEST=$(unzip -l "${ARCHIVE_FILE}" | grep '/bin/java$')
           fi
           # extract the path from the .../bin/java string
           LATEST=${LATEST##* } # remove until the first blank
           LATEST=${LATEST%/*} # remove /java from the string
           LATEST=${LATEST%/*} # remove /bin from the string
           SYMLINK="${TYPE}_latest"

           # relative symlink preferred
           BACKUP=$(pwd)
           cd "${TARGET_DIR}"

           # update the symlink
           rm "${SYMLINK}" 2> /dev/null
           ln -s "${LATEST}" "${SYMLINK}"

           # restore the folder
           cd "${BACKUP}"

           if [ $KEEP -eq 0 ]; then
               printf "Clean up ...\n"
               rm "${ARCHIVE_FILE}"
           fi

           # any jre, sjre or jdk, etc. with -z option is wanted
           if [ $ZOPTION -eq 1 ]; then
               runTzUpdater
           fi

           printf "\nNew binaries have been stored to folder %s\n" "${TARGET_DIR}/${LATEST}"
           printf "Symlink has been created as %s\n" "${TARGET_DIR}/${SYMLINK}"

           EXECUTABLE="${TARGET_DIR}/${SYMLINK}/bin/java"
           # specifying a 10 MB max heap in order to avoid too big heap values on large systems due to Java's ergonomics
           printf "\nExecuting \"%s -Xmx10m -version\" ...\n" "${EXECUTABLE}"
           "${TARGET_DIR}/${SYMLINK}/bin/java" -Xmx10m -version

       else
           printf "FATAL: Download failed.\n"
           exit 1
       fi
    else
       printf "Skipping download, because it seems that you have downloaded %s already in the past. Use -f to force a download.\n" $DOWNLOAD_ADDRESS

       SYMLINK="${TYPE}_latest"
       printf "\nSymlink in order to access it, was stored as %s:\n" "${TARGET_DIR}/${SYMLINK}"
       ls -la "${TARGET_DIR}/${SYMLINK}"

       # any jre, sjre or jdk, etc. with -z option is wanted
       if [ $ZOPTION -eq 1 ]; then
           runTzUpdater
       fi
    fi
}

main "$@"
